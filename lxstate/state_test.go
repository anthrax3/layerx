package lxstate_test

import (
	. "github.com/emc-advanced-dev/layerx-core/lxstate"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/layer-x/layerx-commons/lxdatabase"
"github.com/emc-advanced-dev/layerx-core/fakes"
	"github.com/mesos/mesos-go/mesosproto"
)

func PurgeState() {
	lxdatabase.Rmdir("/state", true)
}

var _ = Describe("State", func() {
	Describe("InitializeState(etcdUrl)", func() {
		It("initializes client (lxdb), creates folders for nodes, tasks, statuses, tps", func() {
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			rootContents, err := lxdatabase.GetSubdirectories("/state")
			Expect(err).To(BeNil())
			Expect(rootContents).To(ContainElement("/state/nodes"))
			Expect(rootContents).To(ContainElement("/state/pending_tasks"))
			Expect(rootContents).To(ContainElement("/state/staging_tasks"))
			Expect(rootContents).To(ContainElement("/state/task_providers"))
			Expect(rootContents).To(ContainElement("/state/statuses"))
		})
	})
	Describe("Set/GetTpiUrl(tpiUrl)", func() {
		It("sets and gets the tpiurl", func() {
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			err = state.SetTpi("fake_url")
			Expect(err).To(BeNil())
			tpiUrl, err := state.GetTpi()
			Expect(err).To(BeNil())
			Expect(tpiUrl).To(Equal("fake_url"))
		})
	})
	Describe("GetAllTasks", func(){
		It("returns all known tasks from pending, staging, and node task pools", func(){
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			fakePendingTask := fakes.FakeLXTask("fake__pending_task_id", "fake_task_name", "fake_slave_id", "echo FAKE_COMMAND")
			fakePendingTask.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = state.PendingTaskPool.AddTask(fakePendingTask)
			Expect(err).To(BeNil())
			fakeStagingTask := fakes.FakeLXTask("fake_staging_task_id", "fake_task_name", "fake_slave_id", "echo FAKE_COMMAND")
			fakeStagingTask.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = state.StagingTaskPool.AddTask(fakeStagingTask)
			Expect(err).To(BeNil())
			fakeNode := fakes.FakeNode("fake_resource_id_1", "fake_node_id_1")
			err = state.NodePool.AddNode(fakeNode)
			Expect(err).To(BeNil())
			nodeTaskPool, err := state.NodePool.GetNodeTaskPool(fakeNode.Id)
			Expect(err).To(BeNil())
			fakeNodeTask1 := fakes.FakeLXTask("fake__node_task_id_1", "fake_task", "fake_node_id_1", "echo FAKECOMMAND")
			fakeNodeTask1.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = nodeTaskPool.AddTask(fakeNodeTask1)
			Expect(err).To(BeNil())
			fakeNodeTask2 := fakes.FakeLXTask("fake__node_task_id_2", "fake_task", "fake_node_id_1", "echo FAKECOMMAND")
			fakeNodeTask2.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = nodeTaskPool.AddTask(fakeNodeTask2)
			Expect(err).To(BeNil())
			fakeNodeTask3 := fakes.FakeLXTask("fake__node_task_id_3", "fake_task", "fake_node_id_1", "echo FAKECOMMAND")
			fakeNodeTask3.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = nodeTaskPool.AddTask(fakeNodeTask3)
			Expect(err).To(BeNil())
			allTasks, err := state.GetAllTasks()
			Expect(err).To(BeNil())
			Expect(allTasks[fakePendingTask.TaskId]).To(Equal(fakePendingTask))
			Expect(allTasks[fakeStagingTask.TaskId]).To(Equal(fakeStagingTask))
			Expect(allTasks[fakeNodeTask1.TaskId]).To(Equal(fakeNodeTask1))
			Expect(allTasks[fakeNodeTask2.TaskId]).To(Equal(fakeNodeTask2))
			Expect(allTasks[fakeNodeTask3.TaskId]).To(Equal(fakeNodeTask3))
		})
	})
	Describe("GetStatusUpdatesForTaskProvider(tpid)", func(){
		It("returns all known status updates for the task provider", func(){
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			fakeTaskProvider := fakes.FakeTaskProvider("fake_framework", "ff@fakeip:fakeport")
			err = state.TaskProviderPool.AddTaskProvider(fakeTaskProvider)
			Expect(err).To(BeNil())
			fakeTask1 := fakes.FakeLXTask("fake_task_id_1", "fake_task1", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask2 := fakes.FakeLXTask("fake_task_id_2", "fake_task2", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask3 := fakes.FakeLXTask("fake_task_id_3", "fake_task3", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask1.TaskProvider = fakeTaskProvider
			fakeTask2.TaskProvider = fakeTaskProvider
			fakeTask3.TaskProvider = fakeTaskProvider
			err = state.StagingTaskPool.AddTask(fakeTask1)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask2)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask3)
			Expect(err).To(BeNil())
			fakeStatusUpdate1 := fakes.FakeTaskStatus("fake_task_id_1", mesosproto.TaskState_TASK_RUNNING)
			fakeStatusUpdate2 := fakes.FakeTaskStatus("fake_task_id_2", mesosproto.TaskState_TASK_KILLED)
			fakeStatusUpdate3 := fakes.FakeTaskStatus("fake_task_id_3", mesosproto.TaskState_TASK_ERROR)
			err = state.StatusPool.AddStatus(fakeStatusUpdate1)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate2)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate3)
			Expect(err).To(BeNil())
			statuses, err := state.GetStatusUpdatesForTaskProvider("fake_framework")
			Expect(err).To(BeNil())
			Expect(statuses).To(ContainElement(fakeStatusUpdate1))
			Expect(statuses).To(ContainElement(fakeStatusUpdate2))
			Expect(statuses).To(ContainElement(fakeStatusUpdate3))
		})
	})
	Describe("GetAllStatusUpdates()", func(){
		It("returns all known status updates", func(){
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			fakeTaskProvider1 := fakes.FakeTaskProvider("fake_framework_1", "ff@fakeip:fakeport")
			err = state.TaskProviderPool.AddTaskProvider(fakeTaskProvider1)
			Expect(err).To(BeNil())
			fakeTask1 := fakes.FakeLXTask("fake_task_id_1", "fake_task1", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask2 := fakes.FakeLXTask("fake_task_id_2", "fake_task2", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask3 := fakes.FakeLXTask("fake_task_id_3", "fake_task3", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask1.TaskProvider = fakeTaskProvider1
			fakeTask2.TaskProvider = fakeTaskProvider1
			fakeTask3.TaskProvider = fakeTaskProvider1
			err = state.StagingTaskPool.AddTask(fakeTask1)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask2)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask3)
			Expect(err).To(BeNil())
			fakeStatusUpdate1 := fakes.FakeTaskStatus("fake_task_id_1", mesosproto.TaskState_TASK_RUNNING)
			fakeStatusUpdate2 := fakes.FakeTaskStatus("fake_task_id_2", mesosproto.TaskState_TASK_KILLED)
			fakeStatusUpdate3 := fakes.FakeTaskStatus("fake_task_id_3", mesosproto.TaskState_TASK_ERROR)
			err = state.StatusPool.AddStatus(fakeStatusUpdate1)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate2)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate3)
			Expect(err).To(BeNil())
			fakeTaskProvider2 := fakes.FakeTaskProvider("fake_framework", "ff@fakeip:fakeport")
			err = state.TaskProviderPool.AddTaskProvider(fakeTaskProvider2)
			Expect(err).To(BeNil())
			fakeTask4 := fakes.FakeLXTask("fake_task_id_4", "fake_task4", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask5 := fakes.FakeLXTask("fake_task_id_5", "fake_task5", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask6 := fakes.FakeLXTask("fake_task_id_6", "fake_task6", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask4.TaskProvider = fakeTaskProvider2
			fakeTask5.TaskProvider = fakeTaskProvider2
			fakeTask6.TaskProvider = fakeTaskProvider2
			err = state.StagingTaskPool.AddTask(fakeTask4)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask5)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask6)
			Expect(err).To(BeNil())
			fakeStatusUpdate4 := fakes.FakeTaskStatus("fake_task_id_4", mesosproto.TaskState_TASK_RUNNING)
			fakeStatusUpdate5 := fakes.FakeTaskStatus("fake_task_id_5", mesosproto.TaskState_TASK_KILLED)
			fakeStatusUpdate6 := fakes.FakeTaskStatus("fake_task_id_6", mesosproto.TaskState_TASK_ERROR)
			err = state.StatusPool.AddStatus(fakeStatusUpdate4)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate5)
			Expect(err).To(BeNil())
			err = state.StatusPool.AddStatus(fakeStatusUpdate6)
			Expect(err).To(BeNil())
			statuses, err := state.GetStatusUpdates()
			Expect(err).To(BeNil())
			Expect(statuses).To(ContainElement(fakeStatusUpdate1))
			Expect(statuses).To(ContainElement(fakeStatusUpdate2))
			Expect(statuses).To(ContainElement(fakeStatusUpdate3))
			Expect(statuses).To(ContainElement(fakeStatusUpdate4))
			Expect(statuses).To(ContainElement(fakeStatusUpdate5))
			Expect(statuses).To(ContainElement(fakeStatusUpdate6))
		})
	})
	Describe("GetTaskPoolContainingTask(taskid)", func(){
		It("returns the task pool containing the task with taskid", func(){
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			fakeTaskProvider := fakes.FakeTaskProvider("fake_framework", "ff@fakeip:fakeport")
			err = state.TaskProviderPool.AddTaskProvider(fakeTaskProvider)
			Expect(err).To(BeNil())
			fakeTask1 := fakes.FakeLXTask("fake_task_id_1", "fake_task1", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask1.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			fakeTask2 := fakes.FakeLXTask("fake_task_id_2", "fake_task2", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask2.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = state.PendingTaskPool.AddTask(fakeTask1)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask2)
			Expect(err).To(BeNil())
			taskPool, err := state.GetTaskPoolContainingTask(fakeTask1.TaskId)
			Expect(err).To(BeNil())
			Expect(taskPool).To(Equal(state.PendingTaskPool))
			taskPool, err = state.GetTaskPoolContainingTask(fakeTask2.TaskId)
			Expect(err).To(BeNil())
			Expect(taskPool).To(Equal(state.StagingTaskPool))
		})
	})
	Describe("GetTaskFromAnywhere(taskid)", func(){
		It("returns the task regardless of where it is stored", func(){
			state := NewState()
			state.InitializeState("http://127.0.0.1:4001")
			PurgeState()
			err := state.InitializeState("http://127.0.0.1:4001")
			Expect(err).To(BeNil())
			fakeTaskProvider := fakes.FakeTaskProvider("fake_framework", "ff@fakeip:fakeport")
			err = state.TaskProviderPool.AddTaskProvider(fakeTaskProvider)
			Expect(err).To(BeNil())
			fakeTask1 := fakes.FakeLXTask("fake_task_id_1", "fake_task1", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask1.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			fakeTask2 := fakes.FakeLXTask("fake_task_id_2", "fake_task2", "fake_node_id_1", "echo FAKECOMMAND")
			fakeTask2.TaskProvider = fakes.FakeTaskProvider("fake_task_provider_id", "tp@fakeip:fakeport")
			err = state.PendingTaskPool.AddTask(fakeTask1)
			Expect(err).To(BeNil())
			err = state.StagingTaskPool.AddTask(fakeTask2)
			Expect(err).To(BeNil())
			task, err := state.GetTaskFromAnywhere(fakeTask1.TaskId)
			Expect(err).To(BeNil())
			Expect(task).To(Equal(fakeTask1))
			task, err = state.GetTaskFromAnywhere(fakeTask2.TaskId)
			Expect(err).To(BeNil())
			Expect(task).To(Equal(fakeTask2))
		})
	})
})
